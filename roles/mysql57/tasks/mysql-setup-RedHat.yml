# ref : https://www.soudegesu.com/en/mysql/mysql8-password/
- name: Install requirements
  yum:
    name: "{{ mysql_default_python_packages }}"
    state: present
    update_cache: true
  register: result
  until: result is succeeded

- name: Create group MySQL
  group:
    name: mysql
    state: present

- name: ADD MySQL user
  user:
    name: mysql
    shell: /bin/false
    group: mysql
    append: yes

- name: Create MySQL Engine directory
  file:
    path: "{{ mysql_default_base_dir }}"
    state: directory
    owner: mysql
    group: mysql

- name: Create MySQL directory data and log
  file:
    path: "{{ mysql_default_root_data_dir }}/{{ item }}"
    owner: mysql
    group: mysql
    mode: 0755
    recurse: yes
    state: directory
  with_items:
    - "mysqldata"
    - "mysqltmp"
    - "mysqllog/error"
    - "mysqllog/binary"
    - "mysqllog/slow"
    - "mysqllog/redo"
    - "mysqllog/undo"

- name: List {{ mysql_default_root_data_dir }}
  shell: "ls -lht {{ mysql_default_root_data_dir }}"
  register: result
- name: show {{ mysql_default_root_data_dir }}
  debug:
    msg: "{{ result.stdout_lines }}"

- name: Create MySQL error log file
  file:
    path: "{{ mysql_default_error_log_file }}"
    owner: mysql
    group: mysql
    state: touch

- name: Download and Extract MySQL Generic binary version
  unarchive:
    src: "{{ download_url }}"
    dest: "{{ mysql_default_base_dir }}"
    extra_opts: [--strip-components=1]
    remote_src: yes

- name: Check MySQL DataDirector is empty or not
  shell: |
    if [ "$(ls -A {{ mysql_default_data_dir }})" ]; then
        echo "Directory Not Empty ===> Stop install"
    else
        echo "Directory Empty ===> install"
    fi
  register: result
  failed_when: "'Directory Not Empty ===> Stop install' in result.stdout_lines"

- name: Install MySQL
  command: "./bin/mysqld --basedir={{ mysql_default_base_dir }} --datadir={{ mysql_default_data_dir }} --log_error={{ mysql_default_error_log_file }} --initialize --user=mysql"
  register: result
  args:
    chdir: "{{ mysql_default_base_dir }}"
- debug:
    msg: "{{ result.stdout_lines }}"

- name: get root password
  shell: "grep 'A temporary password is generated for root@localhost' {{ mysql_default_error_log_file }} | awk -F ' ' '{print $(NF)}'"
  register: root_password

- name: Copy mysql systemd
  template:
    src: mysql.server.j2
    dest: /usr/lib/systemd/system/mysql.service

- name: Copy mysql to /usr/bin/
  copy:
    src: "{{ mysql_daemon_path }}"
    dest: /usr/bin/mysql
    remote_src: yes
    mode: 0755

- name: Copy my.cnf
  template:
    src: my.cnf.j2
    dest: "/etc/my.cnf"

- name: Start and enable MySQL
  service:
    daemon_reload: yes
    name: "mysql"
    state: started
    enabled: yes
  when: ansible_service_mgr == "systemd"

# - name: Wait for service to be ready
#   command: mysql --user root --password={{ root_password.stdout }} --connect-expired-password
#   register: result
#   until: result.stdout.find("Welcome to the MySQL monitor>") != -1
#   retries: 5
#   delay: 10
- name: Wait for webserver to start.
  local_action:
    module: wait_for
    host: "127.0.0.11"
    port: "3306"
    delay: 10
    timeout: 300
    state: started

- name: sleep for specified interval
  command: sleep 60
  
- name: Update Root user Password
  command: mysql --user root --password={{ root_password.stdout }} --connect-expired-password --execute="ALTER USER 'root'@'localhost' identified BY '{{ mysql_root_password }}';"
  vars:
    ansible_python_interpreter: /usr/bin/python3
  notify: restart mysql

- name: Remove anonymous MySQL users
  mysql_user:
    name: ''
    host_all: true
    state: absent
    login_user: "root"
    login_password: "{{ mysql_root_password }}"
    config_file: "/etc/my.cnf"
  vars:
    ansible_python_interpreter: /usr/bin/python3
- name: Remove MySQL test database
  mysql_db:
    name: test
    state: absent
    login_user: "root"
    login_password: "{{ mysql_root_password }}"
    config_file: "/etc/my.cnf"
  vars:
    ansible_python_interpreter: /usr/bin/python3

# - name: Create mysql Clinet user
#   mysql_user:
#     login_user: root
#     login_password: "{{ mysql_root_password }}"
#     name: "{{ item.name }}"
#     password: "{{ item.password }}"
#     priv: '*.*:ALL,GRANT'
#     state: present
#     host: '%'
#   with_items:
#     - "{{ mysql_users }}"
